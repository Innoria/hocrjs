{
    "version": 3,
    "sources": [
        "LICENSE.js",
        "js/parser.js",
        "js/viewer.js",
        "js/fullscreen-init.js"
    ],
    "names": [],
    "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACntZA;AACA;AACA;AACA",
    "file": "dist/hocr-viewer-fullscreen.js",
    "sourcesContent": [
        "/*!\nThe MIT License (MIT)\n\nCopyright (c) 2016 Konstantin Baierer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n",
        "/*!\n *   _\n *  | |__   ___   ___ _ __      _ __   __ _ _ __ ___  ___ _ __\n *  | '_ \\ / _ \\ / __| '__|____| '_ \\ / _` | '__/ __|/ _ \\ '__|\n *  | | | | (_) | (__| | |_____| |_) | (_| | |  \\__ \\  __/ |\n *  |_| |_|\\___/ \\___|_|       | .__/ \\__,_|_|  |___/\\___|_|\n *                             |_|\n *\n *  This software may be modified and distributed under the terms\n *  of the MIT license.  See the LICENSE file for details.\n */\n(function(global)  {\n    function HocrParser() {}\n\n    HocrParser.prototype.bbox = function bbox(s) {\n        return this._titleString(s)\n            .match(/bbox\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)/)\n            .slice(1)\n            .map((coord) => parseInt(coord));\n    };\n\n    HocrParser.prototype.image = function image(s) {\n        return this._titleString(s).match(/image\\s+\"([^\"]+)\"/)[1];\n    };\n\n    /* --------------- *\n     * Private methods *\n     * --------------- */\n    HocrParser.prototype._titleString = function titleString(s) {\n        if (typeof s === 'string') return s;\n        return s.getAttribute('title');\n    };\n\n\n    /* ---------------------------- *\n     * Browser / NodeJS boilerplate *\n     * ---------------------------- */\n    // AMD support\n    if (typeof define === 'function' && define.amd) {\n        define(function() { return HocrParser; });\n        // CommonJS and Node.js module support.\n    } else if (typeof exports !== 'undefined') {\n        // Support Node.js specific `module.exports` (which can be a function)\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = HocrParser;\n        }\n        // But always support CommonJS module 1.1.1 spec (`exports` cannot be a function)\n        exports.HocrParser = HocrParser;\n    } else {\n        global.HocrParser = HocrParser;\n    }\n}(this));\n",
        "/*!\n *   _                               _\n *  | |__   ___   ___ _ __    __   _(_) _____      _____ _ __\n *  | '_ \\ / _ \\ / __| '__|___\\ \\ / / |/ _ \\ \\ /\\ / / _ \\ '__|\n *  | | | | (_) | (__| | |_____\\ V /| |  __/\\ V  V /  __/ |\n *  |_| |_|\\___/ \\___|_|        \\_/ |_|\\___| \\_/\\_/ \\___|_|\n *\n *\n *  This software may be modified and distributed under the terms\n *  of the MIT license.  See the LICENSE file for details.\n */\n(function() {\n\n    var Utils = {\n        addCssFragment: function(styleId, css) {\n            var style = document.querySelector(`#${styleId}`);\n            if (!style) {\n                style = document.createElement('style');\n                style.id = styleId;\n                document.head.appendChild(style);\n            }\n            style.appendChild(document.createTextNode(css));\n        }\n    };\n\n    function HocrViewer(config) {\n        this.config = this.defaultConfig;\n        Object.keys(config || {}).forEach((k) => {\n            // TODO proper conifg\n            this.config[k] = config[k];\n        });\n        this.root = this.config.root\n        if (typeof this.root === 'string')\n            this.root = document.querySelector(this.root);\n        this.parser = new window.HocrParser(this.config);\n        Object.keys(this.config.fonts).forEach((font) => {\n            var cssUrl = this.config.fonts[font].cssUrl;\n            if (cssUrl) Utils.addCssFragment('hocr-view-font-styles', `@import \"${cssUrl}\";\\n`);\n        });\n        this.cache = {\n            scaleFont: {}\n        }\n    }\n\n    // TODO\n    HocrViewer.prototype.log = function logdebug() {\n        var level = arguments[0];\n        if (level > this.config.debugLevel) return;\n        var args = Array.prototype.slice.call(arguments, [1]);\n        var levelToFn = ['info', 'debug', 'log'];\n        console[levelToFn[level]].apply(console, args);\n    }\n\n    HocrViewer.prototype.defaultConfig = {\n        root: 'body',\n        debugLevel: 1,\n        fonts: {\n            'sans-serif': {},\n            serif: {},\n            monospace: {},\n            UnifrakturCook: {\n                cssUrl: 'https://fonts.googleapis.com/css?family=UnifrakturCook:700',\n            },\n            UnifrakturMaguntia: {\n                cssUrl: 'https://fonts.googleapis.com/css?family=UnifrakturMaguntia',\n            },\n            'Old Standard TT': {\n                cssUrl: 'https://fonts.googleapis.com/css?family=Old+Standard+TT',\n            },\n            Cardo: {\n                cssUrl: 'https://fonts.googleapis.com/css?family=Cardo'\n            },\n            'Noto Serif': {\n                cssUrl: 'https://fonts.googleapis.com/css?family=Noto+Serif:400,400i,700&subset=latin-ext'\n            },\n            'Libre Baskerville': {\n                cssUrl: 'https://fonts.googleapis.com/css?family=Libre+Baskerville:400,400i,700&subset=latin-ext'\n            },\n        },\n        features: {\n            backgroundImage: {\n                enabled: false,\n            },\n            scaleFont: {\n                enabled: false,\n                maxFontSize: 128,\n                minFontSize: 2,\n                wrapClass: 'hocr-viewer-wrap',\n            },\n            disableEmStrong: {\n                enabled: false,\n            },\n            contentEditable: {\n                enabled: false,\n            },\n            tooltips: {\n                enabled: false,\n                styleId: 'hocr-viewer-tooltip-style',\n            },\n            borders: {\n                enabled: true,\n            },\n            transparentText: {\n                enabled: false,\n            },\n        },\n        expandToolbar: true,\n        enableToolbar: true,\n        transparentText: false,\n        rootClass: 'hocr-viewer',\n        toolbarId: 'hocr-viewer-toolbar',\n    };\n\n    HocrViewer.prototype.findByOcrClass = function findByOcrClass(query) {\n        query = (query || {});\n\n        // Expect tag\n        query.tag = (query.tag || '*');\n\n        // Arbitrary clauses\n        query.clauses = (query.clauses || '');\n\n        // Return only hocr-elements with a bbox\n        if (query.title) query.clauses += `[title*=\"${query.title}\"]`\n\n        // Return specific ocr_* / ocrx_* classes\n        query.class = (query.class || '');\n        if (typeof query.class === 'string') query.class = [query.class];\n\n        // Build querySelectorAll query\n        var qs = query.class.map(function(cls) {\n            if (cls.indexOf('ocr') == 0) return cls\n            if (cls == '') return 'ocr';\n            if (cls.indexOf('x_') != 0) return `ocr_${cls}`;\n            return `ocr${cls}`;\n        }).map(function(cls) {\n            return `:scope ${query.tag}[class^=\"${cls}\"]${query.clauses}`\n        }).join(',');\n        this.log(1, \"findByOcrClass:\", qs);\n        context = (query.context || document.querySelector('.' + this.config.rootClass));\n        var set = Array.prototype.slice.call(context.querySelectorAll(qs));\n\n        // terminal: Return only hocr-elements containing no hocr-elements themselves\n        // container: Opposite\n        if (query.terminal)\n            set = set.filter(function(el) {\n                if (!el.querySelector('*[class^=\"ocr\"]')) return el;\n            });\n        if (query.container)\n            set = set.filter(function(el) {\n                if (el.querySelector('*[class^=\"ocr\"]')) return el;\n            });\n\n        // Arbitrary filter function\n        if (query.filter) {\n            set = set.filter(query.filter);\n        }\n\n        return set;\n    }\n\n    HocrViewer.prototype.placeOcrElements = function placeOcrElements() {\n        this.findByOcrClass({\n            title: 'bbox'\n        }).forEach((el) => {\n            var coords = this.parser.bbox(el);\n            el.style.left = coords[0] + \"px\";\n            el.style.top = coords[1] + \"px\";\n            el.style.width = coords[2] - coords[0] + \"px\";\n            el.style.height = coords[3] - coords[1] + \"px\";\n        });\n        var coords = this.parser.bbox(document.querySelector('.ocr_page'));\n        document.querySelector('body').style.minHeight = coords[2] + 'px';\n    }\n\n    HocrViewer.prototype.toggleScaleFont = function toggleScaleFont(onoff) {\n        // wrapper element containing wrappers for font-size expansion\n        console.time('toggleScaleFont');\n        var wrap = document.querySelector(`.${this.config.features.scaleFont.wrapClass}`);\n        if (!wrap) {\n            wrap = document.createElement('span');\n            wrap.classList.add(this.config.features.scaleFont.wrapClass);\n            this.root.appendChild(wrap);\n        }\n        if (onoff) {\n            this.findByOcrClass({terminal: true}).forEach((el) => this.scaleFont(el, wrap))\n            // wrap.style.display = 'none';\n        } else {\n            this.findByOcrClass({terminal: true}).forEach((el) => el.style.fontSize = 'initial')\n        }\n        console.timeEnd('toggleScaleFont');\n    }\n\n    HocrViewer.prototype.scaleFont = function scaleFont(el, wrap) {\n        if (el.textContent.trim().length == 0) return;\n        if (!(el.textContent in this.cache.scaleFont)) {\n            // wrap.setAttribute('class', el.getAttribute('class'));\n            // wrap.style.width = '100%';\n            wrap.style.fontFamily = el.style.fontFamily;\n            wrap.innerHTML = el.textContent;\n            var w = 'offsetWidth';\n            var h = 'offsetHeight';\n            var fontsize = Math.min(el[w], el[h]);\n            var min = this.config.features.scaleFont.minFontSize;\n            wrap.style.fontSize = fontsize + 'px';\n            if (fontsize > min && wrap[h] > el[h]) {\n                fontsize -= wrap[h] - el[h];\n                wrap.style.fontSize = fontsize + 'px';\n            }\n            while (fontsize > min && wrap[w] > el[w]) {\n                fontsize -= 1;\n                wrap.style.fontSize = fontsize + 'px';\n            }\n            // if (iterations > 1) console.debug(iterations, el.textContent, wrap[h], el[h], wrap[w], el[w]);\n            this.cache.scaleFont[el.textContent] = fontsize;\n        }\n        el.style.fontSize = this.cache.scaleFont[el.textContent] + 'px';\n    }\n\n    HocrViewer.prototype.toggleTooltips = function toggleTooltips(onoff) {\n        var style = document.querySelector('#' + this.config.features.tooltips.styleId);\n        if (!onoff) {\n            if (style) style.remove();\n        } else {\n            var ocrClasses = {};\n            for (var el of this.findByOcrClass()) {\n                ocrClasses[el.getAttribute('class')] = true;\n            }\n            this.log(0, \"Detected OCR classes\", Object.keys(ocrClasses));\n            if (!style) {\n                style = document.createElement('style');\n                style.setAttribute('id', this.config.features.tooltips.styleId);\n            }\n            style.appendChild(document.createTextNode(Object.keys(ocrClasses).map((cls) =>\n                `.${this.config.rootClass} .${cls}:hover::before { content: \"${cls}\"; }\\n`\n            ).join(\"\\n\")));\n            document.head.appendChild(style);\n        }\n    }\n\n    HocrViewer.prototype.toggleBackgroundImage = function toggleBackgroundImage(onoff) {\n        var page = this.root.querySelector('.ocr_page');\n        if (onoff) {\n            this.findByOcrClass({\n                title: 'image'\n            }).forEach((el) => {\n                var imageFile = this.parser.image(el);\n                page.style.backgroundImage = `url(${imageFile})`;\n            });\n        } else {\n            page.style.backgroundImage = '';\n            // delete this.root.style.backgroundImage;\n        }\n    }\n\n    HocrViewer.prototype.toggleContentEditable = function toggleContentEditable(onoff) {\n        var onContentEditableInput = (ev) => {\n            console.warn(\"Scaling of contentEditable is broken right now\");\n            if (this.config.features.scaleFont.enabled) {\n                this.scaleFont(ev.target);\n                this.findByOcrClass({\n                    context: ev.target\n                }).forEach((child) => {\n                    this.scaleFont(child);\n                })\n            }\n        }\n        this.findByOcrClass({\n            class: ['line', 'x_word'],\n            clauses: '',\n        }).forEach((el) => {\n            if (onoff) {\n                el.setAttribute('contentEditable', 'true');\n                el.addEventListener('input', onContentEditableInput);\n            } else {\n                el.removeAttribute('contentEditable');\n                el.removeEventListener('input', onContentEditableInput);\n            }\n        });\n    }\n\n    HocrViewer.prototype.toggleExpandToolbar = function toggleExpandToolbar(onoff) {\n        this.toolbar.classList.toggle('expanded', onoff);\n    }\n\n    HocrViewer.prototype.toggleFeature = function toggleFeature(feature, onoff) {\n        this.root.classList.toggle(`feature-${feature}`, onoff);\n        var toggle = 'toggle' + feature.substr(0, 1).toUpperCase() + feature.substring(1);\n        if (toggle in this) {\n            this.log(0, `Calling this.${toggle}`);\n            this[toggle](onoff);\n        }\n    }\n\n    HocrViewer.prototype.onConfigChange = function onConfigChange() {\n        Object.keys(this.config.features).forEach((feature) => {\n            this.toggleFeature(feature, this.config.features[feature].enabled);\n        });\n    }\n\n    /**\n     * Add toolbar\n     */\n    HocrViewer.prototype.addToolbar = function addToolbar() {\n        this.toolbar = document.querySelector('#' + this.config.toolbarId);\n        if (this.toolbar) return;\n        this.toolbar = document.createElement('div');\n        this.toolbar.setAttribute('id', this.config.toolbarId);\n        this.toolbar.classList.toggle('expanded', this.config.expandToolbar);\n        document.body.appendChild(this.toolbar);\n        this.toolbar.innerHTML = `\n    <div class=\"toggler\">\n        <div class=\"toggler-inner toggler-show\">\n            &gt;<br/>&gt;<br/>&gt;<br/>&gt;<br/>&gt;<br/>&gt;<br/>&gt;<br/>&gt;<br/>&gt;<br/>\n        </div>\n        <div class=\"toggler-inner toggler-hide\">\n            &lt;<br/>&lt;<br/>&lt;<br/>&lt;<br/>&lt;<br/>&lt;<br/>&lt;<br/>&lt;<br/>&lt;<br/>\n        </div>\n    </div>\n    <div class=\"wrapper\">\n        <h2>Font</h2>\n        <select class=\"fontlist\"></select>\n        <h2>Features</h2>\n        <ul class='features'>\n        </ul>\n        <h2>Zoom</h2>\n        <input type='range' class='zoom' min='0' max='500' step='2' value=\"100\"/>\n    </div>`;\n        this.toolbar.querySelector('.toggler').addEventListener('click', (ev) => {\n            this.config.expandToolbar = !this.config.expandToolbar;\n            this.toggleExpandToolbar(this.config.expandToolbar);\n        });\n\n        // fonts\n        var fontSelect = this.toolbar.querySelector('select.fontlist');\n        Object.keys(this.config.fonts).forEach((font) => {\n            var fontOption = document.createElement('option');\n            fontOption.innerHTML = font;\n            fontOption.style.fontSize = 'large';\n            fontOption.style.fontFamily = font;\n            fontSelect.append(fontOption);\n        });\n        fontSelect.addEventListener('change', (ev) => {\n            var selectedFont = ev.target.options[ev.target.selectedIndex].innerHTML;;\n            this.findByOcrClass().forEach((el) => {\n                el.style.fontFamily = selectedFont;\n            });\n            this.onConfigChange();\n        });\n\n        // features\n        Object.keys(this.config.features).forEach((feature) => {\n            var li = document.createElement('li');\n            var checkbox = document.createElement('input');\n            var label = document.createElement('label');\n            li.appendChild(checkbox);\n            li.appendChild(label);\n            this.toolbar.querySelector('.features').appendChild(li);\n\n            label.innerHTML = feature;\n\n            checkbox.setAttribute('type', 'checkbox');\n            checkbox.checked = this.config.features[feature].enabled;\n            li.classList.toggle('checked', checkbox.checked);\n            var onChange = (ev) => {\n                li.classList.toggle('checked', checkbox.checked);\n                this.config.features[feature].enabled = checkbox.checked;\n                this.toggleFeature(feature, checkbox.checked);\n            };\n            li.addEventListener('click', (ev) => {\n                checkbox.checked = !checkbox.checked;\n                // onChange();\n                li.classList.toggle('checked');\n                this.config.features[feature].enabled = checkbox.checked;\n                this.toggleFeature(feature, checkbox.checked);\n            });\n            checkbox.addEventListener('change', onChange);\n        });\n\n        // Zoom\n        var zoomSlider = this.toolbar.querySelector('.zoom');\n        zoomSlider.addEventListener('input', (ev) => {\n            var scaleFactor = ev.target.value / 100.0;\n            var page = this.root.querySelector('.ocr_page');\n            page.style.transform = `scale(${scaleFactor})`;\n            page.style.transformOrigin = 'top left';\n            // console.log();\n        });\n    }\n\n    HocrViewer.prototype.init = function init() {\n        this.root.classList.add(this.config.rootClass);\n\n        if (this.config.enableToolbar) {\n            this.addToolbar();\n        }\n\n        // place the elements on the page\n        this.placeOcrElements();\n\n        // Events\n        this.onConfigChange();\n        window.addEventListener('resize', () => this.onConfigChange());\n    }\n\n    window.HocrViewer = HocrViewer;\n}(this));\n",
        "(function(window) {\n    window.hocrViewer = new window.HocrViewer({root: document.querySelector('body')});\n    window.hocrViewer.init();\n}(this));\n"
    ]
}